#Given an m x n matrix, the task is to print all elements of the matrix in spiral form.

def print_spiral(matrix):

    #***
    #the limits are changed after completing the outputs of a row or a column, so that we don't go to a row/column that has been printed before.
    #say we are going up. after i reaches the up limit, the up limit is increased by one. if we let i equal to the upper limit, then we will start
    #going over a row we already have printed. so, while going up, the vertical index should be taken at most to "up limit + 1".
    #***
    
    
    #assume matrix is an array of arrays

    
    #we will iterate indices i and j based on how long each row and column is
    horizontal_limit = len(matrix[0])
    vertical_limit = len(matrix)

    
    horizontal_stops = [0,horizontal_limit-1]
    vertical_stops = [0, vertical_limit-1]
    i = vertical_stops[0]
    j = horizontal_stops[0]

    
    #starting directions are set to be right.
    #if one is equal to 1 or -1, the other one is equal to 0. this allows for single directional move.
    right = 1
    down = 0

    
    num_prints = 0
    while num_prints < horizontal_limit*vertical_limit:

        print(matrix[i][j])
        #we start at the vertical limit. we will not go this much up ever again. so the top limit is increased by one
        
        #while going right:
        if right == 1 and down == 0:
            #if there's space to go on the right
            if j < horizontal_stops[1]:
                #pass to right
                j += 1
            #otherwise, you're at the right limit
            else:
                #since we will print all elements at this horizontal coordinate, we will not come back here. so the right limit goes down by one 
                horizontal_stops[1] -= 1
                #since we will go down, after the loop is iterated once, we have to print the element below. so the vertical index is increased here.
                i += 1
                #finally, change the direction vectors so we dont move horizontally and go down
                right = 0
                down = 1
        #while going down:
        elif right == 0 and down == 1:
            #if there's space to go down,
            if i < vertical_stops[1]:
                #go down
                i += 1
            #otherwise, you're at the bottom limit
            else:
                #since we will print all elements at this vertical coordinate, we will not come back here. so the bottom limit goes down by one
                vertical_stops[1] -= 1
                #since we will go left, after the loop is iterated once, we have to print the element on the left. so the horizontal index is decreased.
                j -= 1
                #finally, change the direction vectors so we dont move vertically and go left
                down = 0
                right = -1
        #while going left:                
        elif right == -1 and down == 0:
            #if there's space to go left
            if j > horizontal_stops[0]:
                #go left
                j -= 1
            #otherwise, you're at the left limit
            else:
                #since we will print all elements at this horizontal coordinate, we will not come back here. so the left limit goes up by one
                horizontal_stops[0] += 1
                #since we will go up, after the loop is iterated once, we have to print the element above. so the vertical index is decreased 
                i -= 1
                #finally, change the direction vectors so we dont move horizontally and go up
                down = -1
                right = 0
        #while going up
        else: #right == 0 and down == -1
            #if there's space to go up
            if i > vertical_stops[0]+1: #***#
                #go up
                i -= 1
            #otherwise, you're at the top limit
            else:
                #since we will print all elements at this vertical coordinate, we will not come back here. so the up limit goes up by one
                vertical_stops[0] += 1
                #since we will go right, after the loop is iterated once, we have to print the element on the right. so the horizontal index is increased
                j += 1
                #finally, change the direction vectors so we don't move vertically and go right
                down = 0
                right = 1
        num_prints += 1


